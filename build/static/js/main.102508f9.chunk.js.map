{"version":3,"sources":["../../reacttest/src/images/car.jpg","../../reacttest/src/components/CarItem.js","../../reacttest/src/components/CarDetail.js","../../reacttest/src/components/Cars.js","../../reacttest/src/App.js","../../reacttest/src/serviceWorker.js","../../reacttest/src/index.js"],"names":["module","exports","__webpack_require__","p","CarItem","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props$car","props","car","Year","Make","Model","id","react_default","a","createElement","className","data-toggle","data-target","Component","CarDetail","_this","elem","tabIndex","role","aria-labelledby","aria-hidden","style","backgroundImage","bgImage","type","data-dismiss","aria-label","keys","map","v","i","Cars","cars","components_CarItem","components_CarDetail","App","state","_this2","axios","get","then","res","setState","data","components_Cars","uuid","v4","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.102508f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/car.5727fd87.jpg\";","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\n\n\nexport class CarItem extends Component {\n     \n  render() {\n    \n    const{ Year , Make,  Model, id  } = this.props.car;\n\n    return (\n    \n        <div className=\"card-header\" id={Model + id} data-toggle=\"modal\" data-target={'#' + Make + id} >\n           <span className=\"year\"> { Year } </span> { Make } { Model } \n        </div>   \n\n    )\n    \n  }\n\n}\n\n\nCarItem.propTypes ={\n    car: PropTypes.object.isRequired,\n   \n  \n}\n\n\nexport default CarItem\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport bgImage from '../images/car.jpg';\n\n\n\nexport class CarDetail extends Component {\n     \n  render() {\n\n    const{ id, Make, Year, Model } = this.props.car;\n\n    const elem = this.props.car;\n\n    return (\n           \n    <div id = {Make + id} className=\"modal fade\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n        <div className=\"modal-dialog\" role=\"document\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\" style={{backgroundImage: 'url(' +  bgImage + ')'}}>\n              <h5 className=\"modal-title\">\n              <span className='year'> {Year} </span>\n              <span className='car'>{Make} {Model}</span></h5>\n              <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                 <i className=\"fas fa-times\"></i>\n              </button>\n            </div>\n              <div className=\"modal-body\">\n              <div className='row align-items-center'>\n                 {Object.keys(elem).map((v, i) => <div className=\"col-6\" key={i}><div className=\"car-detail\"><span className=\"label\">{v} </span><span className=\"detail\">{this.props.car[v]}</span></div></div> )}\n               </div>\n              </div>\n            </div>\n        </div>\n    </div>\n   \n    )\n    \n  }\n\n}\n\nCarDetail.propTypes ={\n    car: PropTypes.object.isRequired,\n}\n\nexport default CarDetail\n","import React, { Component } from 'react';\nimport CarInfo from './CarItem';\nimport PropTypes from 'prop-types';\nimport CarDetail from './CarDetail';\n\n\n\nclass Cars extends Component {\n\n\n  render() {\n\n    return this.props.cars.map((car)=>(\n      <div className=\"card\">\n        <CarInfo key={'info' + car.id} car={car} />\n        <CarDetail key={'detail' + car.id} car={car} />\n      </div>\n    ));\n    \n  }\n\n}\n\n\n// PropTypes\nCars.propTypes ={\n    cars: PropTypes.array.isRequired,\n\n}\n\nexport default Cars;\n","import React, { Component } from 'react';\nimport Cars from './components/Cars';\nimport axios from 'axios';\nimport uuid from 'uuid';\n\n\nimport './styles/common.css';\n\nclass App extends Component {\n  state = {\n    cars: [\n     \n    ]\n  }\n\n  componentDidMount(){\n    axios.get('https://gist.githubusercontent.com/scottburton11/66a921c458f9500a773a6b0ac65006df/raw/629bfd6a3125e3428bd85a53231bd8018c407a65/Javascript%2520Working%2520With%2520Data%2520Challenge%2520data')\n    .then(res => this.setState({cars : res.data }))\n  }\n\n  \n \n \n  render() {\n    return (\n    \n      <div className=\"carfinder\">\n        <div className=\"carfinder-holder\">\n          <Cars cars={this.state.cars} key={uuid.v4()}/>\n        </div>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('finderapp'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}